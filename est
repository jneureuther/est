#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# PYTHON_ARGCOMPLETE_OK

"""
A console interface for Exercise Submission Tool (https://est.cs.fau.de/)
"""

__author__ = 'jneureuther, sedrubal'
__license__ = 'CC BY-SA 4.0'
__version__ = '1.2'

from libest import LibEst
from sys import stdout, version_info
from threading import Thread
from time import sleep
from argparse import ArgumentParser
from getpass import getpass
import codecs
from os import chmod
from os.path import expanduser, isfile
try:
    from argcomplete import autocomplete
except ImportError:
    print('[i] Please install python-argcomplete')
try:
    from ConfigParser import ConfigParser
except ImportError:
    from configparser import ConfigParser

if version_info[0] == 2:
    # Python 2 adjustments
    term_input = raw_input
    ConfigParser.read_conf = ConfigParser.readfp
else:
    # Python 3 adjustments
    term_input = input
    ConfigParser.read_conf = ConfigParser.read_file


class Spinner(Thread):
    """
    Class for doing a job in the background, while the foreground is showing an animation
    """
    chars = ["\\", "|", "/", "-"]
    # chars = ["Oooo", "oOoo", "ooOo", "oooO"]
    index = 0
    keep_running = True

    def __init__(self, text):
        super(Spinner, self).__init__()
        self.text = text

    def run(self):
        """
        starts the animation
        :type self: Spinner
        """
        while self.keep_running:
            self.printing('[i] ' + self.chars[self.index % len(self.chars)] + ' ' + self.text)
            sleep(0.1)
            self.index += 1

    @staticmethod
    def printing(data):
        """
        Prints data to stdout and flushes stdout
        :type data: str
        :param data: data to write
        """
        stdout.write("\r\x1b[K" + data.__str__())
        stdout.flush()

    def stop(self):
        """
        Prints the stop message and stops the animation
        :type self: Spinner
        """
        self.printing(u'[✓] ' + self.text)
        self.keep_running = False


est = LibEst()

# <editor-fold desc="argparse">
parser = ArgumentParser(description=__doc__)
parser.add_argument('-u', '--user', action='store', dest='user', help='username to login')
parser.add_argument('-q', '--quiet', action='store_true', dest='quiet',
                    default=False, help='minimize the output')
parser.add_argument('-nc', '--no-colors', action='store_false', dest='colors',
                    default=True, help="disable ANSI color output")
parser.add_argument('-v', '--version', action='version', version='%(prog)s ' + __version__)
subparsers = parser.add_subparsers()
subparsers.required = True

login_parser = subparsers.add_parser('login', help='login on est')
login_parser.set_defaults(which='login')
lo_parser = subparsers.add_parser('lo', help='login on est')
lo_parser.set_defaults(which='login')

search_parser = subparsers.add_parser('search', help='search a file(s) on est')
search_parser.add_argument('file', action='store', type=str, help='path to file(s) to search', nargs='+')
search_parser.set_defaults(which='search')
se_parser = subparsers.add_parser('se', help='search a file(s) on est')
se_parser.add_argument('file', action='store', type=str, help='path to file(s) to search', nargs='+')
se_parser.set_defaults(which='search')

submit_parser = subparsers.add_parser('submit', help='submit a file(s) on est')
submit_parser.add_argument('file', action='store', type=str, help='path to file(s) to search', nargs='+')
submit_parser.add_argument('-g', '--group-submission-code', action='store', dest='group_submission_code',
                           help='submit with group_submission_code')
submit_parser.add_argument('-n', '--no-status', action='store_false', dest='status_query',
                           default=True, help='do not query the status for the submitted file')
submit_parser.set_defaults(which='submit')
su_parser = subparsers.add_parser('su', help='submit a file(s) on est')
su_parser.add_argument('file', action='store', type=str, help='path to file(s) to search', nargs='+')
su_parser.add_argument('-g', '--group-submission-code', action='store', dest='group_submission_code',
                       help='submit with group_submission_code')
su_parser.add_argument('-n', '--no-status', action='store_false', dest='status_query',
                       default=True, help='do not query the status for the submitted file')
su_parser.set_defaults(which='submit')

status_parser = subparsers.add_parser('status', help='check the status of a given file(s)')
status_parser.add_argument('file', action='store', type=str, help='path to file(s) to search', nargs='+')
status_parser.set_defaults(which='status')
st_parser = subparsers.add_parser('st', help='check the status of a given file(s)')
st_parser.add_argument('file', action='store', type=str, help='path to file(s) to search', nargs='+')
st_parser.set_defaults(which='status')

code_parser = subparsers.add_parser('group-submission-code', help='get your group submission code for a specific file')
code_parser.add_argument('file', action='store', type=str, help='path to file(s) to search', nargs='+')
code_parser.set_defaults(which='group-submission-code')
gsc_parser = subparsers.add_parser('gsc', help='get your group submission code for a specific file')
gsc_parser.add_argument('file', action='store', type=str, help='path to file(s) to search', nargs='+')
gsc_parser.set_defaults(which='group-submission-code')

if 'autocomplete' in locals():
    autocomplete(parser)

args = parser.parse_args()
# </editor-fold>


def colorize(color, message):
    """
    Adds ANSI colors to the message if args.colors == True
    :type color: str
    :type message: str
    :param color: Colors to add to the message
    :param message: Message which should be displayed colored
    :return: the colored message
    """
    if args.colors:
        return "%s%s%s" % (color, message, Colors.RESET)
    else:
        return colorize_off(message)


def colorize_off(message):
    """
    Removes ANSI colors from the message and ignores the colors
    :type message: str
    :param message: the message which should be freed of ANSI colors and which should not be displayed with the color
    :return: a blank message
    """
    for color in [Colors.RESET, Colors.BOLD, Colors.ITALIC, Colors.UNDERLINE,
                  Colors.RED, Colors.GREEN, Colors.YELLOW, Colors.BLUE,
                  Colors.MAGENTA, Colors.CYAN, Colors.WHITE]:
        message = message.replace(color, '')
    return message


class Colors:
    """
    chosen ANSI colors
    """
    RESET = '\033[0m'
    BOLD = '\033[1m'
    ITALIC = '\033[3m'
    UNDERLINE = '\033[4m'
    # these are light term fore colors
    # normal colors have code \033[3x and back colors have \033[4x or \033[10x
    RED = '\033[91m'
    GREEN = '\033[32m'  # dark green looks better
    YELLOW = '\033[33m'  # dark yellow looks better
    BLUE = '\033[94m'
    MAGENTA = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'


def print_head():
    """
    Prints the standard head
    """
    if not args.quiet:
        print(colorize(Colors.YELLOW, 'Console Interface to Exercise Submission Tool | Rev' + __version__))
    check_est_version = est.check_est_version()
    if check_est_version is True:
        if not args.quiet:
            print(colorize(Colors.GREEN, '[i] ') + 'Current EST version is supported.')
    elif check_est_version in '-1':
        print(colorize(Colors.RED, u'[✗] ') + 'Cannot access est. Please check your internet connection!')
        exit(1)
    else:
        print(colorize(Colors.RED, u'[✗] ') + 'Current EST version ({v}) is NOT supported!'.
              format(v=check_est_version.split(' ')[-1]))
        exit(1)


def authenticate(mode=0):
    """
    Authenticate with ether username from args or credentials from stdin or from config file
    :type mode: int
    :param mode: 0: if possible read user and password from est.ini else interactive,
    1: read user from arguments and password interactive, 2: read user & password from est.ini, else: interactive
    :return:
    """
    if (args.user is not None and mode == 0) or mode == 1:
        user = args.user
        passwd = getpass()
    elif (isfile(expanduser("~") + "/.est.ini") and mode == 0) or mode == 2:
        try:
            cfg = ConfigParser({})
            cfg.read_conf(codecs.open(expanduser("~") + "/.est.ini", 'r', 'utf8'))
            user = cfg.get('auth', 'user')
            passwd = cfg.get('auth', 'passwd')
        except IOError:
            print(colorize(Colors.RED, u'[✗] ') + "Failed to read config file.")
            authenticate(3)
            return
        except Exception:
            print(colorize(Colors.RED, u'[✗] ') + "Failed to read config from file.")
            authenticate(3)
            return
    else:
        user = term_input('User: ')
        passwd = getpass()
    auth_status = est.authenticate(user, passwd)
    if auth_status is True:
        print(colorize(Colors.GREEN, '[i] ') + 'Successfully signed in with user "{u}"!'.format(u=user))
        if not isfile(expanduser("~") + "/.est.ini") and not args.quiet:
            save = term_input('Store credentials ' + colorize(Colors.BOLD, 'unencrypted') + ' under "{home}/.est.ini"? [y/N] '.
                              format(home=expanduser('~')))
            save.replace('\n', '')
            if 'y' in save or 'Y' in save:
                conf_file = open(expanduser("~") + "/.est.ini", 'w')
                chmod(expanduser("~") + "/.est.ini", 0o700)
                conf_file.write('[auth]\n')
                conf_file.write('user={u}\n'.format(u=user))
                conf_file.write('passwd={passwd}\n'.format(passwd=passwd))
                conf_file.close()
                print(colorize(Colors.GREEN, '[i] ') + 'Credentials stored under "{home}/.est.ini"'.
                      format(home=expanduser('~')))
    else:
        print(colorize(Colors.RED, u'[✗] ') + auth_status)
        exit(1)


def print_status(est_status):
    """
    Prints the status to stdout and returns 0, if status is ok
    :type est_status: str
    :param est_status: Status String from est homepage
    :return: 0 if status is a success message
    """
    if "Submitted files don't compile" in est_status:
        print(colorize(Colors.RED, u'[✗] ') + est_status + '.')
        return 1
    elif "No file submitted" in est_status:
        print(colorize(Colors.RED, '[⩝] ') + est_status + '.')
        return 1
    elif "Error in given test case" in est_status:
        print(colorize(Colors.YELLOW, '[!] ') + est_status + '.')
        return 1
    elif "All files submitted" in est_status or "Test is OK for given test case" in est_status:
        print(colorize(Colors.GREEN, u'[✓] ') + est_status + '.')
        return 0
    else:
        print('[i] ' + est_status + '.')
        return 1


def check_file(filename):
    """
    Checks if a file is worth to submit and returns a triple, containing
    the lecture id, where the file should be submitted,
    the name of the lecture
    and the file id.
    On errors, it returns a triple with negative numbers and prints a message
    :type filename: str
    :param filename: file to check
    :return: a triple (lecture_id, name of lecture, file_id) or (-1, -1, -1) if file is not found in remote or
    (-2, -2, -2) if file is not found locally
    """
    if isfile(filename):
        est_trip = search_file_est(filename)
        if est_trip == (-1, "", -1):
            print(colorize(Colors.RED, u'[✗] ') + 'File "{file}" not found on est in lectures!'.
                  format(file=filename.split('/')[-1]))
            return -1, -1, -1
        else:
            return est_trip
    else:
        print(colorize(Colors.RED, u'[✗] ') + 'File "{file}" not found on pc.'.format(file=filename))
        return -2, -2, -2


def search_file_est(filename):
    """
    Returns a triple, containing
    the lecture id, where the file should be submitted,
    the name of the lecture
    and the file id.
    If the file does not exist on est it returns (-1, "", -1)
    :type filename: str
    :param filename: The name of the file
    :return: if the file does not exist on est it returns (-1, "", -1), else (lecture_id, lecture_name, file_id)
    """
    for index, lec_id in enumerate(lecture_ids):
        if lec_id.isdigit():
            search_res = est.search_file(filename.split('/')[-1], lec_id)
            if search_res == 2:
                continue
            else:
                return str(lec_id), lecture_ids[int(index) + 1], search_res
    return -1, "", -1  # no lecture found


def search(files):
    """
    Does `est search <filenames>`
    :type files: [str]
    :param files: the names of the file(s) to be searched on est
    :return: exit status code (0: success, 1: error)
    """
    has_errors = False
    for f in files:
        (lec_id, lec_name, file_id) = search_file_est(f.split('/')[-1])
        if lec_id == -1:
            print(colorize(Colors.RED, u'[✗] ') +
                  'File "' + f.split('/')[-1] + '" not found on est in lectures!')
            has_errors = True
        else:
            print('[i] File found in lecture ' + lec_name + ', file id: ' + file_id + '.')
    return 1 if has_errors else 0


def submit(files, files_group_submission_code=None):
    """
    Does `est submit <files>`
    :type files: [str]
    :type files_group_submission_code: str
    :param files: the names of the files to be submitted
    :param files_group_submission_code: if this is a group submission, this has to be the group submission code,
    else None
    :return: exit status code (0: success, 1: error)
    """
    has_errors = False
    if not args.quiet:
        if files_group_submission_code is None:
            print("[i] Single Submission")
        else:
            print("[i] Group Submission Code is: " + str(files_group_submission_code))
    for f in files:
        (lec_id, lec_name, file_id) = check_file(f)
        if lec_id != -1:
            if not args.quiet:
                spinner = Spinner('Uploading ' + f.split('/')[-1] + '..')
                spinner.start()
            if files_group_submission_code is None:
                sub_suc = est.submit_file(f.split('/')[-1], f, str(lec_id))
            else:
                sub_suc = est.submit_file(f.split('/')[-1], f, str(lec_id), files_group_submission_code)
            if not args.quiet:
                spinner.stop()
                print('')
            if sub_suc == 1:
                print(colorize(Colors.GREEN, '[i] ') + 'Successfully uploaded "{file}" to "{lecture}"'.
                      format(file=f.split('/')[-1], lecture=lec_id))
                if files_group_submission_code is not None:
                    print('[i] Submission together with: "{partner}"'.
                          format(partner=est.get_submission_with(files_group_submission_code,
                                                                 str(lec_id)).split('(')[0].strip()))
            elif sub_suc == 2:
                print(colorize(Colors.RED, '[✗] ') +
                      'File "' + f.split('/')[-1] + '" not found on est in lectures!')
                has_errors = True
                continue
            elif sub_suc == 3:
                print(colorize(Colors.RED, '[✗] ') +
                      'File is empty!')
                has_errors = True
            else:
                print('[i] ' + sub_suc)

            if args.status_query:
                status({f}, True)
        else:
            has_errors = True
    return has_errors


def status(files, waiting=False):
    """
    Does `est status <files>`
    :type files: [str]
    :type waiting: bool
    :param files: The files of which the status should be displayed
    :param waiting: True, if the script should wait while est is testing the file
    :return: exit status code (0: success, 1: error)
    """
    has_errors = False
    for f in files:
        (lec_id, lec_name, file_id) = search_file_est(f)
        if lec_id == -1:
            print(colorize(Colors.RED + Colors.BOLD, '[!] ') + 'File "{file}" not found on est in lectures!'.
                  format(file=f.split('/')[-1]))
            has_errors = True
            continue
        if waiting:
            if not args.quiet:
                spinner2 = Spinner('Waiting for test result..')
                spinner2.start()
            submit_status = est.check_status(f.split('/')[-1], str(lec_id))
            while submit_status == 'Waiting for test result':
                sleep(5)
                submit_status = est.check_status(f.split('/')[-1], str(lec_id))
            if not args.quiet:
                spinner2.stop()
                print('')
        else:
            submit_status = est.check_status(f.split('/')[-1], str(lec_id))
        if submit_status is not None:
            print('[i] status for ' + f.split('/')[-1] + ':')
            has_errors |= print_status(submit_status)
            continue
        else:
            print(colorize(Colors.YELLOW, '[?] ') + 'Status for "{file}" not found on est in lectures!'.
                  format(file=f.split('/')[-1]))
            has_errors = True
            continue
    return has_errors


def group_submission_code(files):
    """
    Does `est group_submission_code <files>`
    :type files: [str]
    :param files: The files of which the group submission code should be displayed
    :return: exit status code (0: success, 1: error)
    """
    has_errors = False
    for f in files:
        (lec_id, lec_name, file_id) = search_file_est(f)
        if lec_id == -1:
            print(colorize(Colors.RED, u'[✗] ') +
                  'File ' + f.split('/')[-1] + ' not found on est in lectures!')
            has_errors = True
            continue
        gsc = est.get_group_submission_code(f, lec_id)
        if gsc == '':
            print(colorize(Colors.RED, u'[✗] ') + 'No group submission code found for file "' + f.split('/')[-1]
                  + '" in group submissions!')
            has_errors = True
            continue
        else:
            print('[i] group submission code for file "' + f.split('/')[-1] + '" is:')
            print('[i] ' + str(gsc))
    return has_errors

# <editor-fold desc="main">
if __name__ == '__main__':
    try:
        print_head()
        authenticate()
        lecture_ids = est.get_lecture_ids()
        if hasattr(args, 'which'):
            if args.which is 'search' and hasattr(args, 'file'):
                exit(1 if search(args.file) else 0)
            elif args.which is 'submit' and hasattr(args, 'file'):
                if hasattr(args, "group_submission_code"):
                    exit(1 if submit(args.file, args.group_submission_code) else 0)
                else:
                    exit(1 if submit(args.file) else 0)
            elif args.which is 'status' and hasattr(args, 'file'):
                exit(1 if status(args.file) else 0)
            elif args.which is 'group-submission-code' and hasattr(args, 'file'):
                exit(1 if group_submission_code(args.file) else 0)
            elif args.which is 'login' and not hasattr(args, 'file'):
                exit(0)  # if login was unsuccessful, the program exited before
            exit(1)
    except KeyboardInterrupt:
        if not args.quiet:
            print(colorize(Colors.RED, '\nAborted.'))
# </editor-fold>
